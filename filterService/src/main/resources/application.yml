eureka:
    client:
        fetchRegistry: true
        registerWithEureka: true
        serviceUrl:
            defaultZone: http://localhost:9000/eureka
    instance:
        instance-id: ${spring.application.name}:${instanceId:${random.value}}
        preferIpAddress: true
server:
    port: 0
spring:
    application:
        name: filter-service
    autoconfigure:
        exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
    data:
        mongodb:
            database: rentacarfilterdb
            uri: mongodb://localhost:27017
    kafka:
        consumer:
            auto-offset-reset: earliest
            bootstrap-servers: localhost:9092
            group-id: filter
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            properties:
                spring:
                    json:
                        trusted:
                            packages: '*'
            value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
        topic:
            name: topics1
